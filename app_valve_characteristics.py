#!/usr/bin/env python
# coding: utf-8

# In[ ]:


#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Streamlit App: Control Valve Characteristics (Installed Performance)
- Interactive visualization of linear vs. equal-percentage trims
- Adapted from original ipywidgets version
- Compatible with: streamlit run app_valve_characteristics.py
"""

import streamlit as st
import numpy as np
import matplotlib.pyplot as plt

# -----------------------------------------------------------------------------
# Page configuration
# -----------------------------------------------------------------------------
st.set_page_config(page_title="Valve Performance Visualization", layout="wide")
st.title("Valve Performance – Installed Characteristics")
st.caption("Compare linear and equal-percentage valve trims under installed conditions.")

# -----------------------------------------------------------------------------
# Constants and parameters
# -----------------------------------------------------------------------------
c1 = 2.0     # Coefficient for pressure drop across equipment
DPt = 100    # Total pressure generated by pump (bar, arbitrary units)
g_s = 1.1    # Specific gravity of fluid

# -----------------------------------------------------------------------------
# Helper functions
# -----------------------------------------------------------------------------
def f_lin(x, R):
    """Linear valve trim."""
    return x

def f_ep(x, R):
    """Equal-percentage valve trim (R = 20–50 typical)."""
    return R**(x - 1)

def DPe(q):
    """Pressure drop across process equipment (excluding valve)."""
    return c1 * q**2

def qi(x, f, Cv, R):
    """Flow rate through the valve and process system."""
    return np.sqrt((Cv * f(x, R))**2 * DPt / (g_s + (Cv * f(x, R))**2 * c1))

# -----------------------------------------------------------------------------
# Sidebar Controls
# -----------------------------------------------------------------------------
st.sidebar.header("Valve Parameters")

Cv = st.sidebar.slider("Valve Flow Coefficient (Cv)", 0.1, 10.0, 0.5, 0.1)
R = st.sidebar.slider("Equal-Percentage Valve Rangeability (R)", 20.0, 50.0, 20.0, 1.0)

st.sidebar.markdown("**Note:** Cv controls overall flow capacity; R affects curvature of equal-percentage trim.")

# -----------------------------------------------------------------------------
# Main Computation
# -----------------------------------------------------------------------------
lift = np.linspace(0, 1, 100)  # Valve lift (fraction open)
flow_lin = qi(lift, f_lin, Cv, R)
flow_ep = qi(lift, f_ep, Cv, R)

# -----------------------------------------------------------------------------
# Plot 1: Flow vs. Lift
# -----------------------------------------------------------------------------
fig1, ax1 = plt.subplots(figsize=(7, 5))
ax1.plot(lift, flow_lin, 'b-', label='Linear Valve')
ax1.plot(lift, flow_ep, 'r--', label='Equal Percentage Valve')
ax1.plot([0, 1], [0, 9.4], 'k-', linewidth=2, label='Desired Profile')
ax1.set_xlabel('Lift (fraction open)')
ax1.set_ylabel('Flow (arbitrary units)')
ax1.set_title('Flow vs. Lift')
ax1.legend(loc='best')
ax1.grid(True)
st.pyplot(fig1)

# -----------------------------------------------------------------------------
# Plot 2: Pressure Drops for Linear Trim
# -----------------------------------------------------------------------------
fig2, ax2 = plt.subplots(figsize=(7, 4))
ax2.plot(lift, DPt - DPe(flow_lin), 'k:', linewidth=3, label='Valve ΔP (Linear)')
ax2.plot(lift, DPe(flow_lin), 'r--', linewidth=3, label='Equipment ΔP')
ax2.set_xlabel('Lift')
ax2.set_ylabel('ΔP (pressure drop)')
ax2.set_title('Pressure Drops – Linear Valve')
ax2.legend(loc='best')
ax2.grid(True)
st.pyplot(fig2)

# -----------------------------------------------------------------------------
# Plot 3: Pressure Drops for Equal-Percentage Trim
# -----------------------------------------------------------------------------
fig3, ax3 = plt.subplots(figsize=(7, 4))
ax3.plot(lift, DPt - DPe(flow_ep), 'k:', linewidth=3, label='Valve ΔP (Equal %)')
ax3.plot(lift, DPe(flow_ep), 'r--', linewidth=3, label='Equipment ΔP')
ax3.set_xlabel('Lift')
ax3.set_ylabel('ΔP (pressure drop)')
ax3.set_title('Pressure Drops – Equal-Percentage Valve')
ax3.legend(loc='best')
ax3.grid(True)
st.pyplot(fig3)

# -----------------------------------------------------------------------------
# Footer and optional data table
# -----------------------------------------------------------------------------
st.markdown("---")
st.subheader("Numerical Data (Sample Points)")
data = {
    "Lift": lift,
    "Flow (Linear)": flow_lin,
    "Flow (Equal %)": flow_ep,
    "ΔP Equipment (Linear)": DPe(flow_lin),
    "ΔP Equipment (Equal %)": DPe(flow_ep)
}
st.dataframe(data)

st.success(f"Simulation complete: Cv={Cv:.2f}, R={R:.1f}")

# Optional: CSV download
import pandas as pd
df = pd.DataFrame(data)
st.download_button(
    "Download Data as CSV",
    df.to_csv(index=False),
    file_name="valve_performance.csv",
    mime="text/csv"
)

